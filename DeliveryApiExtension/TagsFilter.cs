using Umbraco.Cms.Core.DeliveryApi;
using Umbraco.Cms.Core.Models;
using Umbraco.Cms.Core;
using StackExchange.Profiling.Internal;

namespace Umbraco.Blogs.DeliveryApiExtension;


internal static class TagFilterConstants
{
    internal const string FilterSpecifier = "tag:";

    internal const string FieldName = "tags";
}

internal class TagContentIndexHandler : IContentIndexHandler
{
    // returns the search index field(s) that are (potentially) generated by this index handler
    public IEnumerable<IndexField> GetFields() => new[]
    {  
        new IndexField
        {
            FieldName = TagFilterConstants.FieldName,
            FieldType = FieldType.StringRaw,
            VariesByCulture = false
        }
    };

    // extracts the relevant search index field values (if any) for a content item
    public IEnumerable<IndexFieldValue> GetFieldValues(IContent content, string? culture)
    {
      
        if(content.ContentType.Alias is not "blogPost")
        {
            return Array.Empty<IndexFieldValue>();
        }
       
        var tags = content.GetValue<string>("tags");
        if (tags is null)
        {
            
            return Array.Empty<IndexFieldValue>();
        }

        return new[]
        {
            new IndexFieldValue
            {
                FieldName = TagFilterConstants.FieldName,
                Values = new object[]{tags}
            }
        };
    }
}

internal class TagFilterHandler : IFilterHandler
{
    // whether or not this filter can handle a "filter" query part
    public bool CanHandle(string query)
        => query.StartsWith(TagFilterConstants.FilterSpecifier, StringComparison.OrdinalIgnoreCase);

    // builds the filter option for the "filter" query part
    public FilterOption BuildFilterOption(string filter)
    {
        var fieldValue = filter[TagFilterConstants.FilterSpecifier.Length..];

        // there might be several values for the filter
        var values = fieldValue.Split(',');

        return new FilterOption
        {
            FieldName = TagFilterConstants.FieldName,
            Values = values,
            Operator = FilterOperation.Contains
        };
    }
}

